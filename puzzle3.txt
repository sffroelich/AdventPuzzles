## 12/14/2020	Advent Calender puzzle#3

https://adventofcode.com/2020/settings#


for Advent Code Puzzles, at https://adventofcode.com/
(anonymous user #1279410)
Provide 
 
1279410-20201212-9b195723

if you are asked to prove you own this account by an Advent of Code administrator. Don't post this code in a public place.

------------------- "Tobaggen Trajectory"----------------------
third puzzle:  find the tobaggan path thru the trees (angles)

------------------------------------------------------------------------------
tree map - "." = open, "#" = tree:

..##.......
#...#...#..
.#....#..#.
..#.#...#.#
.#...##..#.
..#.##.....
.#.#.#....#
.#........#
#.##...#...
#...##....#
.#..#...#.#

the above pattern repeats infinitely to the right:

..##.........##.........##.........##.........##.........##.......  --->
#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........#.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...##....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#  --->

You start on the open square (.) in the top-left corner and need to reach the bottom (below the bottom-most row on your map).

The toboggan can only follow a few specific slopes (you opted for a cheaper model that prefers rational numbers); start by counting all the trees you would encounter for the slope right 3, down 1:

From your starting position at the top-left, check the position that is right 3 and down 1. Then, check the position that is right 3 and down 1 from there, and so on until you go past the bottom of the map.

The locations you'd check in the above example are marked here with O where there was an open square and X where there was a tree:

..##.........##.........##.........##.........##.........##.......  --->
#..O#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..
.#....X..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.
..#.#...#O#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#
.#...##..#..X...##..#..#...##..#..#...##..#..#...##..#..#...##..#.
..#.##.......#.X#.......#.##.......#.##.......#.##.......#.##.....  --->
.#.#.#....#.#.#.#.O..#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#
.#........#.#........X.#........#.#........#.#........#.#........#
#.##...#...#.##...#...#.X#...#...#.##...#...#.##...#...#.##...#...
#...##....##...##....##...#X....##...##....##...##....##...##....#
.#..#...#.#.#..#...#.#.#..#...X.#.#..#...#.#.#..#...#.#.#..#...#.#  --->
In this example, traversing the map using this slope would cause you to encounter 7 trees.

Starting at the top-left corner of your map and following a slope of right 3 and down 1, how many trees would you encounter?

------------------------------------------------
observe:
	you start in the open, top left - need to go past the bottom-most row on the map
	in example aboe, 11 rows - in the input (input3.txt) - there are 323 rows (lines).
	input3 seems to have a width of 31: (columns)
		..#..  .##..  .###.  .....  ...#.  .#..#  .

	first part wants you to count the number of trees you encounter on way down, following "right 3 - down 1" repeatededly
	
	to traverse all the way down (presumably in part b, without hitting trees), must go past left end of input map; since it repeats
	infinitely to right, may want to use modulo of pattern, when going right past column31.

	implies positions:
		current - "cright, cdown"   current line (increases goes down - 0 (top) to 322 (bottom)) "cline" enumerate iterates beginning at zero index (for loop?)
		next -     "nright, ndown"

	to position against a map, that has first item as the zero-th element (tmap[0]), 
	then, have to adjust the x pointer: "tmap[(nright -1) % 31]"	



-------------------
python:
---------------------


linelist = [line.rstrip('\n') for line in open(r"C:\Users\SFF1\OneDrive - HP Inc\Documents\diary\AdventCalendar-Puzzles\input3.txt", "r")]

linelist
----skipping to end...------------
........#........#.', '......#.##..####...#...#..#...#', '#.......#.........#....#....###', '#......#...#........#.##....###', '.#.#..............#...#...###.#', '.#....####...#..##.###.....#...', '.......#......#..#...#..##.#...', '...........#.......#...........', '..............#...#.#.#.#...##.', '.###.....##.#.....#..........#.', '##.##......#....##..#.....###.#', '#.......#...##...#....##...#...', '##.#.##...#....#....#....#.....', '.....####...........#.#......#.', '......#...#....#..#......#.....', '...#...##..........#.......##.#', '.#....#..........#.####........', '...##...#..#...##........##..#.', '.........##....#...##..#.##.#..', '##.#.....#.......#.....#.......', '#..#....#.##.#........#........', '#.#...#...##........#.#.....###', '....#...................#.#.#..', '.......#..#.#...#....#.##.#....', '....##...###.#.#.##...#...#....', '.#....#....#...##.#......#...#.', '............##..#.#.#........#.', '...#....#.....#......#........#', '...#.#.....#.##.....#....#...#.', '.....#..##.......#.##.......#.#', '........##................#....', '....#..###...##.#..#...#......#', '.#.#.......#.......#....##.#..#', '..#........#............#......', '..##.......#..#..#....#....#..#', '#...###.......#.##...#.........', '.....#...#...#..##..#....#..#..', '.##.#..#...##.........###.#....', '..#.#..#...#...####.#...#.#.#.#', '#....#..###.....#......#.##..##', '##......#...##...###......#.##.', '...........#.....##...#...#...#', '..#..#.#.....#..#.....###...#..', '.............#..........###...#', '....##............#....###.##.#', '..##.#..##.....#.#.........#.#.', '....#.#...........####.........', '.##.###.##.#.#......#.##.#.#...', '.....##.........#..#.......#...', '...........#.........#....###..', '...#.#..#..........#.....#..#..', '.#..###.......##........#.#....', '.#...###.....#..#.#..#...#.##..', '##...###.#.#....#......#...#..#', '....#.......#..#..##..#.#......', '#.#......#.##..#......#..#....#', '....#..#..#.....#.#......#..#..', '..#...###......##.............#', '..#....####...##.#...##.#......', '.....#.......###...............', '.......#...#.#.......#.#.##.###', '.#.#...#.....#...##.........#..', '..#..........#..#.........##...']
---------------------------
 for i, val in enumerate(linelist):
...     print(i, ",", val)
...
0 , ..#...##...###.........#..#..#.
1 , #.###........#..##.#......#...#
2 , #.#.###..#.#..#.#............#.
3 , .##............#......#...#.#..
4 , ..#..#.....##..##..##..........
5 , ...#...........###.#.##........
6 , ....#.#...#..#..##............#
7 , ....#....##...##..##........#..
8 , .#..#..#....#...#..##.....##...
9 , .#.###..#......####........##..
10 , ..#...###....#......#.....##.##
11 , ..#...#.......#......#..##....#
12 , #...##....#.#..#.......#....#..
13 , .#......#..#...........#....##.

...
318 , ..#....####...##.#...##.#......
319 , .....#.......###...............
320 , .......#...#.#.......#.#.##.###
321 , .#.#...#.....#...##.........#..
322 , ..#..........#..#.........##...

so:, verifying:
>>> linelist[0]
'..#...##...###.........#..#..#.'
>>> linelist[1]
'#.###........#..##.#......#...#'
>>> linelist[2]
'#.#.###..#.#..#.#............#.'

and to access inside each string  (looking at the last one, above)
>>> linelist[2]
'#.#.###..#.#..#.#............#.'
>>> linelist[2][0]
'#'
>>> linelist[2][1]
'.'
>>> linelist[2][2]
'#'
------------------

--------------------------------
# exec(open(r"C:\Users\SFF1\OneDrive - HP Inc\Documents\diary\AdventCalendar-Puzzles\puzzle3a.py").read())


linelist = [line.rstrip('\n') for line in open(r"C:\Users\SFF1\OneDrive - HP Inc\Documents\diary\AdventCalendar-Puzzles\input3.txt", "r")]

treecnt = 0
right = 3
cx = 0
for i in range(322):			# input has 323 lines
    cx = (cx + right) % 31
    if ( linelist[i + 1][cx] == '#'):
        treecnt += 1
        pass      #cx = right
    else:
        pass      #cx = right
print("trees encountered: ", treecnt)


------------------
correct answer is 205 trees
--------------------------------------------------------
part two.
--- Part Two ---
Time to check the rest of the slopes - you need to minimize the probability of a sudden arboreal stop, after all.

Determine the number of trees you would encounter if, for each of the following slopes, you start at the top-left corner and traverse the map all the way to the bottom:

Right 1, down 1.
Right 3, down 1. (This is the slope you already checked.)
Right 5, down 1.
Right 7, down 1.
Right 1, down 2.
In the above example, these slopes would find 2, 7, 3, 4, and 2 tree(s) respectively; multiplied together, these produce the answer 336.

What do you get if you multiply together the number of trees encountered on each of the listed slopes?

------------------------------------------  run the above, just chagning the 'right" variable - but for last one, down 2 means doubling the step of for loop and i
Right 1, down 1.  --> 87
Right 3, down 1.  --> 205
Right 5, down 1.  --> 85
Right 7, down 1.  --> 79
Right 1, down 2.  --> 33

87 * 205 * 85 * 79 * 33 = 3,952,146,825

---------------------------